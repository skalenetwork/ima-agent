
name: Comprehensive test

on: 
  push:
    branches-ignore:
      - 'docs-v*'
  
jobs:
  test-comprehensive:
    runs-on: ubuntu-latest
    steps:

    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v2
      with:
          submodules: recursive

    - uses: oven-sh/setup-bun@v1

    - name: UPDATE - system deps and install libc6, net-tools, btrfs-progs, zip, unzip, bash, procps, curl
      run: |
        sudo apt-get update
        sudo apt-get install -y libc6 net-tools btrfs-progs zip unzip build-essential
        sudo apt-get install -y bash
        sudo apt-get install -y procps
        sudo apt-get install -y curl

    - name: INIT - install docker
      run: |
        sudo apt-get remove -y docker* containerd* || true
        curl -fsSL https://get.docker.com -o install-docker.sh
        sudo sh install-docker.sh
        docker --version
        docker-compose --version

    - name: INIT - reconfigure docker and restart its daemon
      run: |
        sudo systemctl unmask docker
        sudo groupadd docker || true
        sudo gpasswd -a username docker || true
        sudo service docker restart || true

    - name: INIT - uninstall old Node JS if any
      run: |
        sudo npm cache clean -f || true &> /dev/null
        sudo apt-get remove -y nodejs npm node -y || true &> /dev/null
        sudo apt-get purge -y nodejs -y || true &> /dev/null
        sudo apt-get autoremove -y || true &> /dev/null
        sudo rm -rf /usr/bin/node || true &> /dev/null
        sudo rm -rf /usr/include/node || true &> /dev/null
        sudo rm -rf /usr/lib/node_modules || true &> /dev/null
        sudo rm -rf /usr/local/bin/npm  || true &> /dev/null
        sudo rm -rf /usr/local/share/man/man1/node* || true &> /dev/null
        sudo rm -rf /usr/local/lib/dtrace/node.d || true &> /dev/null
        sudo rm -rf ~/.npm || true &> /dev/null
        sudo rm -rf ~/.node-gyp || true &> /dev/null
        sudo rm -rf /opt/local/bin/node || true &> /dev/null
        sudo rm -rf /opt/local/include/node || true &> /dev/null
        sudo rm -rf /opt/local/lib/node_modules || true &> /dev/null
        sudo rm -rf /usr/local/lib/node* || true &> /dev/null
        sudo rm -rf /usr/local/include/node* || true &> /dev/null
        sudo rm -rf /usr/local/bin/node* || true &> /dev/null

    - name: INIT - install Node JS
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: INIT - install Node utilities
      run: |
        npm install --global npx || true
        npm install --global yarn
        npm install --global node-gyp

    - name: INIT - Download comprehensive-test
      working-directory: ${{env.working-directory}}
      run: |
        export IMA_AGENT_ROOT_DIR=$(pwd)
        echo IMA_AGENT_ROOT_DIR = $IMA_AGENT_ROOT_DIR
        git clone https://github.com/skalenetwork/comprehensive-test.git --recursive

    - name: INIT - install Ethereum Main Net emulation
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test
        pwd
        cd cli-hh
        export PATH=$PATH:$(dirname $(which npx))
        yarn install
        ./clean.sh || true
        ./init.sh

    - name: INIT - startup Ethereum Main Net emulation
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/cli-hh
        ./run.sh &> ../local_mainnet_output_log.txt &

    - name: INIT - Install PYTHON
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: INIT - Install everything in IMA
      working-directory: ${{env.working-directory}}
      run: |
        yarn install

    - name: INIT - build IMA
      working-directory: ${{env.working-directory}}
      run: |
        yarn rebuild

    - name: INIT - initialize comprehensive test tokens
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/test_tokens
        yarn install

    - name: INIT - initialize S-Chain configuration creator
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/s_chain_gen
        yarn install

    - name: INIT - initialize S-Chain configuration creator
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/s_chain_gen
        yarn install

    - name: INIT - check skaled can run
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test
        export DETECTED_UBUNTU_VERSION=$(lsb_release -r | cut -f2)
        export TRYING_SKALED_AT_PATH=./app_cache/bin_$DETECTED_UBUNTU_VERSION/skaled
        $TRYING_SKALED_AT_PATH --colors --version
        $TRYING_SKALED_AT_PATH --help

    - name: INIT - generate configuration files for S-Chain nodes
      working-directory: ${{env.working-directory}}
      run: |
        export PATH=$PATH:$(dirname $(which npx))
        cd comprehensive-test/s_chain_gen
        ./init.sh

    - name: INIT - download Skale Manager
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test
        git clone https://github.com/skalenetwork/skale-manager.git --recursive

    - name: INIT - install Skale Manager dependencies
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/skale-manager
        yarn install

    - name: INIT - install comprehensive engine dependencies
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/engine 
        yarn install

    - name: SELF-TEST A - use IMA to browse S-Chain via node 00-00 and test last is alive
      working-directory: ${{env.working-directory}}
      run: |
        node ./src/build/main.js --colors --no-gathered --browse-s-chain --url-s-chain=http://127.0.0.1:2164 || true

    - name: SELF-TEST B - use IMA to browse S-Chain via node 00-01 and test last is alive
      working-directory: ${{env.working-directory}}
      run: |
        node ./src/build/main.js --colors --no-gathered --browse-s-chain --url-s-chain=http://127.0.0.2:2264 || true

    - name: SELF-TEST C - use IMA to browse S-Chain via node 01-00 and test last is alive
      working-directory: ${{env.working-directory}}
      run: |
        node ./src/build/main.js --colors --no-gathered --browse-s-chain --url-s-chain=http://127.0.0.3:2364 || true

    - name: SELF-TEST D - use IMA to browse S-Chain via node 01-01 and test last is alive
      working-directory: ${{env.working-directory}}
      run: |
        node ./src/build/main.js --colors --no-gathered --browse-s-chain --url-s-chain=http://127.0.0.4:2464 || true

    - name: INIT - download SGX Wallet
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test
        git clone https://github.com/skalenetwork/sgxwallet.git --recursive
        cd sgxwallet
        git checkout develop
        git fetch
        git pull
        git branch
        git status

    - name: INIT - update docker image SGX Wallet in the emulation mode
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/sgxwallet/run_sgx_sim
        rm -rf ../../local_sgxwallet_output_log.txt &> /dev/null
        docker-compose down
        docker-compose pull

    - name: INIT - start SGX Wallet
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/sgxwallet/run_sgx_sim
        docker-compose up &> ../../local_sgxwallet_output_log.txt &
        sleep 90

    - name: INIT - check SGX Wallet has listening ports
      working-directory: ${{env.working-directory}}
      run: |
        echo "sleeping 45 seconds..."
        sleep 45
        echo "checking port 1026 commonly used by SGX Wallet for HTTPS..."
        sudo netstat -tulpn | grep 1026
        echo "...Done"
        echo "checking port 1027 commonly used by SGX Wallet for HTTP..."
        sudo netstat -tulpn | grep 1027
        echo "...Done"

    - name: INIT - download transaction manager
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test
        rm -rf transaction-manager || true
        git clone https://github.com/skalenetwork/transaction-manager --recursive

    - name: INIT - start transaction manager and redis
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/transaction-manager
        export SGX_SERVER_URL=http://127.0.0.1:1027
        export ENDPOINT=http://127.0.0.1:8545
        export ETH_PRIVATE_KEY=23ABDBD3C61B5330AF61EBE8BEF582F4E5CC08E554053A718BDCE7813B9DC1FC
        ./scripts/run-test-containers.sh
        cd ..
        echo "------------------------------------------------------------------------------------"
        docker ps
        echo "------------------------------------------------------------------------------------"
        export TM_CONTAINER_ID=$(docker ps | grep transaction-manager | awk '{print $1;}')
        echo "Transaction manager docker container ID:" $TM_CONTAINER_ID
        docker logs $TM_CONTAINER_ID -f &> engine/tm.log &
        echo "------------------------------------------------------------------------------------"
        export REDIS_CONTAINER_ID=$(docker ps | grep redis | awk '{print $1;}')
        echo "Redis container ID:" $REDIS_CONTAINER_ID
        docker logs $REDIS_CONTAINER_ID -f &> engine/redis.log &

    - name: INIT - prepare ulimit
      working-directory: ${{env.working-directory}}
      run: |
        ulimit -n 65535 > /dev/null
        echo "ulimit is now set to" $(ulimit -n)

    - name: RUN - create certificates
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/engine/create_pems
        ./create_pems.sh

    - name: RUN - main engine steps
      working-directory: ${{env.working-directory}}
      run: |
        export IMA_AGENT_ROOT_DIR=$(pwd)
        echo IMA_AGENT_ROOT_DIR = $IMA_AGENT_ROOT_DIR
        cd comprehensive-test/engine
        export ALL_SKALE_TEST_CLOUD_RUN=1
        export SEPARATED_IMA_AGENT_MODE=1
        export PATH=$PATH:$(dirname $(which npx))
        node ./index.js

    - name: SHUTDOWN - stop SGX Wallet
      working-directory: ${{env.working-directory}}
      run: |
        cd comprehensive-test/sgxwallet/run_sgx_sim
        docker-compose down

    - name: SHUTDOWN - stop transaction manager and redis
      run: |
        docker stop $TM_CONTAINER_ID $REDIS_CONTAINER_ID || true
        docker rm $TM_CONTAINER_ID $REDIS_CONTAINER_ID || true

    - name: SHUTDOWN - zombie cleanup, if any
      run: |
        killall -9 skaled node npx python python3 || true
        pkill -9 -f skaled || true
