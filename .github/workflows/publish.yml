name: Build and publish IMA Agent

on:
  pull_request:
    types: [closed]
    branches:
      - 'v*.*.*'
      - develop
      - beta
      - stable
  push:
    tags:
      - 'custom-release-*'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: oven-sh/setup-bun@v1

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v2
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: INIT - install Node JS
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: INIT - install Node utilities
      run: |
        npm install --global yarn
        npm install --global node-gyp
        npm install --global color-support

    - name: INIT - version checks of Node JS and its utilities
      run: |
        which node
        node --version
        which npx
        npx --version
        which npm
        npm --version
        which yarn
        yarn --version
        which node-gyp
        node-gyp --version

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Build and publish container
      run: |
        export BRANCH=${GITHUB_REF##*/}
        echo "Branch $BRANCH"
        export VERSION=$(bash ./scripts/calculate_version.sh)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version $VERSION"
        ( test $BRANCH = "stable" && export PRERELEASE=false ) || export PRERELEASE=true
        echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV
        echo ------------ download binaries
        LIB_BLS_RELEASE_TAG=${{ secrets.LIB_BLS_RELEASE_TAG }} bash ./scripts/download_binaries.sh
        export RELEASE=true
        echo "RELEASE=$RELEASE" >> $GITHUB_ENV
        echo ------------ docker image
        bash ./scripts/build_image.sh ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_PASSWORD }} #|| echo "----> Looks like deploy failed"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: ${{ env.VERSION }}
        draft: false
        prerelease: ${{ env.PRERELEASE }}
